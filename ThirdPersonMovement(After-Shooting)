using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Cinemachine;

public class ThirdPersonShooterMovement : MonoBehaviour
{
    public CharacterController controller;
    public CinemachineVirtualCamera aimCamera;
    public Transform cam;
    public LayerMask aimColliderMask = new LayerMask();
    public Transform vfxBlood;
    public Transform vfxSparks;

    public float speed = 6;
    public float gravity = -9.81f;
    public float jumpHeight = 3;
    Vector3 velocity;
    bool isGrounded;

    public Transform groundCheck;
    public float groundDistance = 0.4f;
    public LayerMask groundMask;

    float turnSmoothVelocity;
    public float turnSmoothTime = 0.1f;
    public float Sensetivity = 1f;
    float xRotation = 0f;
    float yRotation = 0.0f;

    private void Start()
    {
        Cursor.lockState = CursorLockMode.Locked;
    }

    // Update is called once per frame
    private void Update()
    {
        //raycast

        Vector2 screenCentrePoint = new Vector2(Screen.width / 2f, Screen.height / 2f);
        Ray ray = Camera.main.ScreenPointToRay(screenCentrePoint);

        Transform hitTransform = null;
        Vector3 raycastPointHit = new Vector3();
        if (Physics.Raycast(ray, out RaycastHit raycastHit, 999f, aimColliderMask))
        {
            raycastPointHit = raycastHit.point;
            hitTransform = raycastHit.transform;
        }
        //aim
        if (Input.GetMouseButton(1))
        {
            aimCamera.gameObject.SetActive(true);
            float mouseX = Input.GetAxis("Mouse X") * Sensetivity * Time.deltaTime;
            float mouseY = Input.GetAxis("Mouse Y") * Sensetivity * Time.deltaTime;
            xRotation -= mouseY;
            yRotation += mouseX;

            xRotation = Mathf.Clamp(xRotation, -90f, 90f);
            transform.localRotation = Quaternion.Euler(xRotation, yRotation, 0f);
            //raycast
            if (Input.GetMouseButtonDown(0))
            {
                if(hitTransform != null)
                {
                    //hit target
                    if (hitTransform.GetComponent<targetScript>() != null)
                    {
                        var blooooooood = Instantiate(vfxBlood, raycastPointHit, Quaternion.identity, null);
                        blooooooood.GetComponent<ParticleSystem>().Play();
                    }
                    //hit something else
                    else
                    {
                        var spaaaaaaaarks = Instantiate(vfxSparks, raycastPointHit, Quaternion.identity, null);
                        spaaaaaaaarks.GetComponent<ParticleSystem>().Play();
                    }
                    Debug.DrawRay(raycastPointHit, Vector3.forward, Color.magenta);
                    Debug.Log("Hit " + hitTransform.name);
                }
                
            }
        }
        //move
        else
        {
            aimCamera.gameObject.SetActive(false);

            //jump
            isGrounded = Physics.CheckSphere(groundCheck.position, groundDistance, groundMask);

            if (isGrounded && velocity.y < 0)
            {
                velocity.y = -2f;
            }

            if (Input.GetButtonDown("Jump") && isGrounded)
            {
                velocity.y = Mathf.Sqrt(jumpHeight * -2 * gravity);
            }
            //gravity
            velocity.y += gravity * Time.deltaTime;
            controller.Move(velocity * Time.deltaTime);
            //walk
            float horizontal = Input.GetAxisRaw("Horizontal");
            float vertical = Input.GetAxisRaw("Vertical");
            Vector3 direction = new Vector3(horizontal, 0f, vertical).normalized;

            if (direction.magnitude >= 0.1f)
            {
                //look rotation
                float targetAngle = Mathf.Atan2(direction.x, direction.z) * Mathf.Rad2Deg + cam.eulerAngles.y;
                float angle = Mathf.SmoothDampAngle(transform.eulerAngles.y, targetAngle, ref turnSmoothVelocity, turnSmoothTime);
                transform.rotation = Quaternion.Euler(0f, angle, 0f);

                //movement
                Vector3 moveDir = Quaternion.Euler(0f, targetAngle, 0f) * Vector3.forward;
                controller.Move(moveDir.normalized * speed * Time.deltaTime);
            }

        }
    }
        //sensetivity - currently not implemented
        public void SetSensetivity(float newSensetivity)
        {
            Sensetivity = newSensetivity;
        }
}
